//There are 2N people a company is planning to interview.
//The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].
//Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.


//Used a dp approach here. We have to fit N people in each city A and city B.
//dp[i][j] is the cost of fitting the (i+j)th person. i,j are persons in city A and city B respectively.

public int twoCitySchedCost(int[][] costs) {
        int n = costs.length;
        int nn = n/2;
        int dp[][] = new int[nn+1][nn+1];
        for(int i = 1 ; i<=nn;i++){
            dp[i][0] = dp[i-1][0] + costs[i-1][0];
            dp[0][i] = dp[0][i-1] + costs[i-1][1];
        }
        for(int i = 1; i <= nn; i++){
            for(int j = 1; j <= nn; j++){
                dp[i][j] = Math.min((dp[i-1][j] + costs[i+j-1][0]),(dp[i][j-1] + costs[i+j-1][1]));
            }
        }
        return dp[nn][nn];
}
